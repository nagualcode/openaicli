#!/usr/local/bin/bash

if [[ -z "$OPENAI_KEY" ]]; then
echo "Please add:  'export OPENAI_KEY=xxxxxxxx' to your .bash_profile"
exit 1
fi

# Error handling function
# $1 should be the response body
handleError() {
	if echo "$1" | jq -e '.error' >/dev/null; then
		echo -e "Your request to Open AI API failed: \033[0;31m$(echo "$1" | jq -r 
'.error.type')\033[0m"
		echo "$1" | jq -r '.error.message'
		exit 1
	fi
}



# create history file
if [ ! -f ~/.chatgpt_history ]; then
	touch ~/.chatgpt_history
	chmod a+rw ~/.chatgpt_history
fi

query() {

	if [[ "$1" =~ ^image: ]]; then
		image_response=$(curl https://api.openai.com/v1/images/generations \
			-sS \
			-H 'Content-Type: application/json' \
			-H "Authorization: Bearer $OPENAI_KEY" \
			-d '{
    		"prompt": "'"${1#*image:}"'",
    		"n": 1,
    		"size": "512x512"
			}')
		handleError "$image_response"
		image_url=$(echo "$image_response" | jq -r '.data[0].url')
		if [[ ! $running ]]; then
		echo "$image_url"
		else

			if [[ -n $image_url ]]; then
			#download the generated image prompt to a filename without special characters:
			permitted="A-Za-z0-9._-"
			renamed_variable="${1#*image:}"
            filtered_variable="${renamed_variable//[^$permitted]/_}"
			limited_string="${filtered_variable:0:50}"
			equal_names_counter=0
			while [[ -e "$limited_string-$equal_names_counter" ]]; do
  				((equal_names_counter++))
			done
			if [[ "$equal_names_counter" -gt 0 ]]; then
			imgname="$limited_string-$(printf "%02d" $equal_names_counter)"
			else
			imgname="$limited_string"
			fi
			curl -sS "$image_url" -o ~/Downloads/"$imgname".png

			open ~/Downloads/"$imgname".png
			fi
		fi


		
	elif [[ "$1" == "history" ]]; then
		echo -e "\n$(cat ~/.chatgpt_history)"
	else
		# escape quotation marks
		escaped_prompt="${1//\"/\\\"}"
		# request to OpenAI API
		response=$(curl https://api.openai.com/v1/completions \
			-sS \
			-H 'Content-Type: application/json' \
			-H "Authorization: Bearer $OPENAI_KEY" \
			-d '{
  			"model": "text-davinci-003",
  			"prompt": "'"${escaped_prompt}"'",
  			"max_tokens": 1000,
  			"temperature": 0.7
			}')

		handleError "$response"
		response_data=$(echo "$response" | jq -r '.choices[].text' | sed '1,2d')
		if [[ "$running" ]]; then
		echo -e "\n\033[36mchatgpt: \033[0m${response_data}"
		else
		echo "${response_data}"
		fi
		timestamp=$(date +"%d/%m/%Y %H:%M")
		echo -e "$timestamp $prompt \n$response_data \n" >>~/.chatgpt_history
	fi

}

if [[ -n "$1" ]]; then
query "$1"
else
echo -e "\nHello, ask me anything. \nFor image use \033[36mimage: \033[0m"
running=true
while true; do
	echo
	read -r prompt

	if [[ "$prompt" == "exit" ]] || [[ "$prompt" == "quit" ]]; then
		exit 0
		else
	query "$prompt"
	fi
done
du -h ~/.chatgpt_history
fi

